//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    fastq = null
    ref_genome = null
    ref_annotation = null
    threads = 4
     // Thresholds for viewing isoforms in report table
    isoform_table_nrows = 5000

    out_dir = "output"
    sample = null
    sample_sheet = null
    sanitize_fastq = false
    wfversion = "v0.1.5"
    aws_image_prefix = null
    aws_queue = null
    report_name = "report"
    process_label = "isoforms"

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion,wf,process_label,slurm_queue,slurm_cpus,slurm_memory,slurm_time,slurm_options'

    // Process cDNA reads using pychopper, turn off for direct RNA:
    direct_rna = false
    // Options passed to pychopper:
    pychopper_opts = "-m edlib"

    // Extra option passed to minimap2 when generating index
    minimap_index_opts = "-k14"

    // Extra options passed to minimap2
    // For SIRV data
    //minimap2_opts = "-uf --splice-flank=no"
    // AFor non-SIRV data:
    minimap2_opts = "-uf"

    // Minmum mapping quality
    minimum_mapping_quality = 40

    // Internal priming filter context size:
    poly_context = 24

    // Maximum allowed poly(A) length in the genome near the 3' end of mapping:
    max_poly_run = 8

    // Minimium number of reads in BAM bundles:
    bundle_min_reads = 50000

    // Options passed to stringtie:
    stringtie_opts = " --conservative "

    // Options passed to gffcompare:
    gffcompare_opts = " -R "

    // Plot gffcompare results:
    plot_gffcmp_stats = true

    disable_ping = false

    //// Denovo-specific parameters
    denovo = false

    // Batch size in kilobases (if -1 then it is calculated based on the number of cores and bases):
    batch_size = -1

    // Maximum sequences per input batch (-1 means no limit):
    batch_max_seq = -1

    // Clustering mode:
    cls_mode = "sahlin"

    // Kmer size:
    kmer_size = 11

    // Window size:
    window_size = 15

    // Minimum cluser size in the left batch:
    min_left_cls = 2

    // Consensus period (-1 means no consensus):
    consensus_period = 500

    // Minimum consensus sample size:
    consensus_minimum = 50

    // Maximum consensus sample size:
    consensus_maximum = -150

    // Minimum number of minimizers shared between read and cluster:
    min_shared = 5

    // Minimum average quality value:
    min_qual = 7.0

    // Minmum mapped fraction of read to be included in cluster:
    mapped_threshold = 0.65

    // Minimum aligned fraction of read to be included in cluster:
    aligned_threshold = 0.2

    // Minimum fraction of minimizers shared compared to best hit, in order to continue mapping:
    min_fraction = 0.8

    // Minimum probability for i consecutive minimizers to be different between read and representative:
    min_prob_no_hits = 0.1

    ////// Fusion detection parameters
    jaffal_refBase = null
    jaffal_genome = "hg38"
    jaffal_annotation = "genCode22"
    // The default location of the JAFFA src directory when running in EPI2ME-Labs environment
    // This needs overriding if running elsewhere
    jaffal_dir = "/home/epi2melabs/JAFFA"

    // de options
    de_analysis = false
    condition_sheet = "test_data/condition_sheet.tsv"
    ref_transcriptome = null
    min_samps_gene_expr	= 3
    min_samps_feature_expr = 1
    min_gene_expr = 10
    min_feature_expr = 3

	// slurm parameters
	slurm_queue = 'parallel'
	slurm_cpus = 8
	slurm_memory = '8G'
	slurm_time = '2h'
	//Extra options for specific slurm configurations, e.g. accounting, GPU requirements or specific compute nodes."
	slurm_options = ''

    wf {
      example_cmd = [
          "--fastq test_data/fastq",
          "--ref_genome test_data/SIRV_150601a.fasta",
          "--ref_annotation test_data/SIRV_isofroms.gtf",
          "--jaffal_refBase chr20/",
          "--jaffal_genome hg38",
          "--jaffal_annotation genCode22"
      ]
    }
}

manifest {
    name            = 'epi2me-labs/wf-transcriptomes'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-transcriptomes'
    description     = 'RNA/cDNA isoform analysis workflow'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
    //version       = 'v0.0.1'
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:isoforms {
        container = "ontresearch/wf-transcriptomes:${params.wfversion}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}


profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }


    // profile using conda environments
    conda {
    docker.enabled = false
    process {
        withLabel:isoforms {
            conda = "${projectDir}/environment.yaml"
        }
        shell = ['/bin/bash', '-euo', 'pipefail']
    }
    conda {
        enabled = true // required for 22.08
        cacheDir = ""
        useMamba = true
    }
}

	// Use a HPC with a Slurm configuration
	slurm { // general hpc configuration
        process {
           executor = 'slurm'
           queue = "${params.slurm_queue}"
           cpus = "${params.slurm_cpus}"
           memory = "${params.slurm_memory}"
           time = "${params.slurm_time}"
           clusterOptions = "${params.slurm_options}"
        }
        executor {
           queueSize = 50
        }
    }


    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:isoforms {
                container = "${params.aws_image_prefix}-wf-transcriptomes:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
